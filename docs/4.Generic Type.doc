Todo List 개발 - Map
    - TidiItem의 저장을 배열에서 Map 객체로 변경합니다.
    - 전체 할일 목록을 출력하기 위한 메소드를 새로 정의합니다.
    - 할일 목록 중에서 완료된 할일 목록을 삭제하는 메소드를 추가합니다.

    TodoCollection
    nextId - number
    Username - string
    todoItems - Map<number, TodoItem>
    addTodo(task:string)- number
    getTodoById(id:number) - TodoItem
    markComplete(id:number, complete : Boolean)- void

    getTodoItems(includeComplete: boolean): TodoItem[]
    removeComplete():void

Generics
    - 재사용 가능한 클래스, 함수를 만들기 위해 다양한 타입에서 사용 가능 하도록 하는 것이 제네릭(Generic) 입니다.
    - 제네릭을 이용하면 모든 타입의 객체를 다루면서 객체 타입의 무결성을 유지할 수 있습니다.
    - 제네릭을 통해 클래스나 함수 내부에서 사용되는 특정 데이터의 타입을 외부에서 지정합니다.
    - 제네릭이 적용된 대상(클래스, 함수, 인터페이스)은 선언 시점이 아닌 생성 시점에 사용하는 타입을 결정합니다.

    class Orange {
        private name = 'Orange';
        constructor(private brix: number = 0){}
        getName(): string{
            return this.name;
        }
        getBrix():number{
            return this.brix;
        }
    }

    class Apple {
        private name = 'Apple';
        constructor(private brix: number =0){}
        getName():string{
            return this.name;
        }
        getBrix():number{
            return this.brix;
        }
    }

    class Box{
        constructor(private fruit: any = {}){}
        getFruit():any{
            return this.fruit;
        }
    }

    const box = new Box(new Orange(5));
    console.log(box.getFruit().getName()); //Orange
    console.log(box);
    // Box {fruit: Orange{brix: 5, name: 'Orange}}
    const testBox = new Box('Banana'); //compile pass
    console.log(testBox.getFruit().getName());
    // runtime error


    - 제네릭에 사용되는 파라미터는 타입 파라미터(Type Parameter)라 하며 관용적으로 T를 사용합니다.
    - 제네릭이 적용된 대상은 인스턴스화 될 때 지정된 데이터 타입으로 모든 타입 파아미터의 타입이 지정됩니다.
    - 타입 파라미터는 상속을 통해 특정 타입의 하위 타입으로 제한 할 수 있습니다.


    class Orange {
        private name = 'Orange';
        constructor(private brix: number = 0){}
        getName(): string{
            return this.name;
        }
        getBrix():number{
            return this.brix;
        }
    }

    class Apple {
        private name = 'Apple';
        constructor(private brix: number =0){}
        getName():string{
            return this.name;
        }
        getBrix():number{
            return this.brix;
        }
    }

    class Box<T>{
        constructor(private fruit: T){}
        getFruit():T{
            return this.fruit;
        }
    }

    const box: Box<Orange> = new Box(new Orange(5));
    console.log(box.getFruit().getName()); //Orange
    console.log(box);
    // Box {fruit: Orange{brix: 5, name: 'Orange}}
    const testBox = new Box('Banana'); //compile pass
    console.log(testBox.getFruit().getName());
    // compile error