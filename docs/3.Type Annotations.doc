Type Annotations - Varlables, Object Literal Annotations
    - 정적 타입을 기본으로 하는 C, Java와 마찬가지로 변수 선언에 타입을 지정할 수 있습니다.
    - 변수에 대한 타입을 지정하면 해당 변수에 다른 타입의 값을 대입(assign) 할 수 없습니다.
    - 변수에 정의한 타입과 다른 타입의 값을 대입하는 코드는 TypeScript 컴파일러에 의해 컴파일 오류가 발생됩니다.
    - 객체 리터럴에 대한 타입 정의는 해당 리터럴 객체가 갖는 각각의 프로퍼티에 대한 타입을 나열하는 형태로 정의합니다.

    // primitive types 
    let name: string = 'kim';
    let age: number = 20;
    let hasName: boolean = true;

    let nullValue: null = null;
    let nothing: undefined = undefined;

    // built in objects
    let now: Date = new Date();

    // Array
    let colors: string[] = ['red', 'yellow', 'blue'];
    let numbers: number[] = [1, 2, 3, 4, 5];

    // Class
    class Person {}
    let person: Person = new Person();

    // Object Literal 
    let point: { x: number; y: number} = {
        x: 10,
        y: 20,
    };


Type Annotations - Functions
    - 함수를 정의할 때 파라미터와 반환값에 타입을 지정합니다.
    - 함수의 종류(선언적 함수, 익명함수, 람다 함수)에 따라 타입 지정에 대한 표현에는 차이가 있습니다.
    - 함수의 파라미터를 정의할 때 선택적 매개변수(Optional Parameter)를 지정할 수 있습니다.

    선언적 함수
        - function add(n1: number, n2: number): number {
            return n1 + n2;
        }

    익명 함수
        - const add = function(n1: number, n2: number): number {
            return n1 + n2;
        }
    
    람다 함수
        - const add:(n1: number, n2: number) => number = (n1:number, n2:number) : number =>{
            return n1 + n2 ;
        }


Type Annotations - Functions
    - JavaScript는 기본적으로 가변인자를 통한 함수 호출이 가능했지만 TypeScript는 가변인자를 지원하지 않습니다.
    - 대신 TypeScript는 함수의 오버로딩(Function overloading)을 가변인자와 같은 효과를 구현할 수 있습니다.
    - 선택적 매개변수는 함수 호출시 전달인자를 선택적으로 보낼 수 있는 기능의 매개변수 입니다.
    - 이외에 ES6 버전부터 지원하는 기본 매개변수(Default Parameter), 나머지 매개변수(Rest Parameter)가 있습니다.

    함수 오버로딩
        function add(firstParam : string, secondParam : string): string;
        function add(firstParam : number, secondParam : number): number;

        function add(firstParam: any, secondParamL any): any {
            console.log(firstParam + secondParam);
        }

        add(10, 20);
        add('10', '20');

Type Annotations - Inference Around Functions
    - 함수의 파라미터를 정의할 때 각 파라미터의 타입을 지정하지 않으면 any 타입의 파라미터가 지정됩니다.
    - 함수의 반환값에 대한 타입은 return 실행문에 따라 타입 추론(Type Inference)이 적용 됩니다.
    - 파라미터에 타입을 지정하지 않으면 일반 변수와 마찬가지로 암묵적인 any 타입의 적용으로 경고 사항입니다.
    - 반환값의 경우 return 구문으로 명시적인 타입의 유추가 가능합니다.

    const findArea = function (width : number, heigth : number):number{
        return width * heigth;
    }

    const findArea = function (width : number, heigth : number){
        return width * heigth;
    }

    - 함수의 반환값이 없을 경우 void 타입의 반환을 정의 합니다.
    - 함수의 반환값으로 정의 가능한 never 타입은 절대 발생하지 않는 값의 타입을 나타냅니다.
    - void 타입은 변수로 사용될 경우 undefined, null 값만 대입(assign) 가능합니다.
    - never 타입은 어떤 타입의 변수에도 대입 될 수 있지만 never 타입에는 어떤 타입의 값도 대입될 수 없습니다.

    let accountBalance: number = 10000;

    function overdraftError(message?: string): never{
        throw Error(message);
    }

    function withdraw(balance : number): number{
        if (accountBalance < balance){
            overdraftError('잔액이 부족합니다.');
        }
        return accountBalance - balance;
    }

    console.log(withdraw(3000)); // 7000
    console.log(withdraw(15000)); // Error: 잔액이 부족합니다.

    
Type Annotations - Typed Array
    - 배열도 일반 변수와 마찬가지의 타입 시스템이 적용되며 타입의 명시적 지정과 초기화를 통한 타입 지정이 가능합니다.
    - 타입을 명시적 혹은 묵시적으로 지정하지 않을 경우 해당 배열 참조 변수는 any 타입의 변수로 지정됩니다.
    - 배열에 서로 다른 타입의 요소를 저장하는 것이 가능하며 이를 타입으로 지정할 수 있습니다.
    - 서로 다른 타입의 요소로 타입이 지정되면 해당 배열에는 순서에 상관없이 지정된 타입들의 요소를 저장할 수 있습니다.

    const members : string[] = ['Kim','Park', 'Lee];

    const members = ['Kim','Park','Lee'];

    const myAry = ['TypeScript', 2020];
    // const myAry: (string | number)[] = [];

    console.log(myAry[0]); // TypeScript
    console.log(myAry[1]); // 2020
    myAry[2] = 3030;
    myAry[3] = 'JavaScript';

Type Annotations - Tuples
    - 튜플을 이용하면 배열의 요소 수와 각 요소에 대한 타입을 지정할 수 있습니다.
    - 튜플은 정해진 길이에 맞지 않으면 에러가 발생합니다. 하지만 push()합수를 이용하면 튜플의 규칙은 무시됩니다.
    - 서로 다른 타입의 요소를 갖는 배열은 순서에 상관없이 데이터를 넣을 수 있는 방면 튜플은 정해진 순서에 맞게 넣습니다.
    - 튜플 타입은 배열보다 저장되는 요소에 순서와 수에 제약을 두고자 할 때 사용합니다.

    const tuples : [ string, number] = ['Kim', 30];

    tuples[0] = 'Park'; // OK
    // tuples[0] = 50; // Type '50' is not assignable to type 'string'.ts(2322)

    tuples[1] = 50;
    console.log(tuples); // ['Park', 50]

    tuples.push(100);
    console.log(tuples); // ['Park', 50, 100]